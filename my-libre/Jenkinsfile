	// git repository info
	def gitRepository = 'http://172.10.0.5/root/charts.git'
	def gitBranch = 'beta'

	// Image infor in registry
	def imageGroup = 'staging'
	def appName = "my-libre"
	def namespace = "staging"

	//helm param for upgradeW
	def helmRelease="librenms-standalone"
	def helmValues = "/var/lib/jenkins/workspace/librenms/my-libre/values.yaml"
	def helmChart = "/var/lib/jenkins/workspace/librenms/my-libre"
	def k8sEnv = "/var/lib/jenkins/workspace/librenms/my-libre/k8s"

	// harbor-registry credentials1
	def registryCredential = 'jenkin_harbor'
	// gitlab credentials
	def gitlabCredential = 'jenkin_gitlab'
	
	dockerBuildCommand = './'
    // def version = "prod-0.${BUILD_NUMBER}"
    def version = "latest"

	pipeline {
		agent any
		
		environment {
			DOCKER_REGISTRY = 'https://repo.cpt.gov.vn'
			DOCKER_IMAGE_NAME = "${imageGroup}/${appName}"
			DOCKER_IMAGE = "repo.cpt.gov.vn/${DOCKER_IMAGE_NAME}"
			DOCKER_FILE = "$helmChart/Dockerfile"
		}

		stages {
		
			stage('Checkout project') 
			{
			  steps 
			  {
				echo "checkout project"
				git branch: gitBranch,
				   credentialsId: gitlabCredential,
				   url: gitRepository
				sh "git reset --hard"				
			  }
			}

			// stage('Build docker and push to registry') 
			// {
			//   steps 
			//   {
			// 	script {
			// 			// sh "chmod +x -R prebuildfs"
			// 			// sh "chmod +x -R rootfs"
			// 			// sh "cd $helmChart"
			// 			// app = docker.build(DOCKER_IMAGE_NAME, dockerBuildCommand)
			// 			// docker.withRegistry( DOCKER_REGISTRY, registryCredential ) {                       
			// 			//    app.push(version)
			// 			// }
			// 		    sh "docker build -t ${DOCKER_IMAGE}:${version} -f ${DOCKER_FILE} ."
			// 			sh "docker rmi ${DOCKER_IMAGE_NAME} -f"
			// 			sh "docker rmi ${DOCKER_IMAGE}:${version} -f"		
			// 		//	sh "docker rmi ${DOCKER_IMAGE}:latest -f"				
			// 		}
			//   }
			// }
			stage('Deploy to k8s beta1') {
				steps {
					script {
						echo "Deploy to k8s"
						// sh "helm --namespace=$namespace --kubeconfig=$k8sEnv delete $appName || true"
						sh "helm --namespace=$namespace --kubeconfig=$k8sEnv upgrade --install $helmRelease -f $helmValues $helmChart  --set=image.tag=$version"
				}
			}
		}
	}
	}